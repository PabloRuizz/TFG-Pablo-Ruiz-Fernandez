<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>